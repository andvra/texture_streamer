name: CMake

on:
  push:
    branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
  
    - name: Print cl.exe (before)
      run: |   
        if((Get-Command cl -ErrorAction SilentlyContinue) -eq $null) {echo "Did not find cl"}
        Get-Command cl -ErrorAction SilentlyContinue

    # https://github.com/marketplace/actions/enable-developer-command-prompt
    - uses: ilammy/msvc-dev-cmd@v1
  
    - name: Print cl.exe
      run: |   
        if((Get-Command cl -ErrorAction SilentlyContinue) -eq $null) {echo "Did not find cl"}
        Get-Command cl -ErrorAction SilentlyContinue

    # https://github.com/marketplace/actions/setup-ninja
    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        # ninja version to download. Default: 1.10.0
        version: 1.10.0

    - name: Print Ninja path
      run: |
        if((Get-Command ninja -ErrorAction SilentlyContinue) -eq $null) {echo "Did not find ninja"}
        Get-Command ninja -ErrorAction SilentlyContinue
  
    # See https://github.com/marketplace/actions/check-artifact-existence
    - uses: xSAVIKx/artifact-exists-action@v0
      id: check-vcpkg-artifact-exists
      with:
        name: 'assets-zip'

    - name: Checking for artifact existance
      run: echo "Does artifact exists? $env:ARTIFACT_EXISTS"
      env:
        ARTIFACT_EXISTS: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) }}

    - name: Print all
      env:
        ALL_CHECK_OUTPUT: ${{join(steps.check-vcpkg-artifact-exists.outputs.*, '\n')}}
        ASD: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) }}
        ASD1: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == true }}
        ASD2: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == false }}
      run: |
          "echo ALL_CHECK_OUTPUT is $env:ALL_CHECK_OUTPUT"
          "echo ASD is $env:ASD"
          "echo ASD1 is $env:ASD1"
          "echo ASD2 is $env:ASD2"

    #- name: Conditional2
    #  if: ${{ $env:ASD }}
    #  run: echo "This works 2"
   
    - name: Print GitHub Context
      run: |
          "echo GITHUB_CONTEXT is $env:GC"
          "echo hej"
          "echo AI is $env:AO"
      env:
        GC: ${{ toJSON(github) }}
        AO: ${{ toJSON(steps.check-vcpkg-artifact-exists.outputs) }}
     
    - uses: lukka/get-cmake@latest


    - name: Download and unzip vcpkg files
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == false }}
      run: |
        Invoke-WebRequest -Uri "https://file.io/5IAG4ezPm1Yu"  -OutFile ../assets.zip
        Expand-Archive ../assets.zip -DestinationPath ..
        Get-Location
        dir

    # See https://github.com/actions/upload-artifact
    - uses: actions/upload-artifact@v3
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == false }}
      with:
        name: ../assets-zip
        path: assets.zip

    # See https://github.com/actions/download-artifact
    - uses: actions/download-artifact@v3
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == true }}
      with:
        name: assets-zip
        path: ..
        
    # See https://github.com/marketplace/actions/action-zip
    - uses: montudor/action-zip@v1
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == true }}
      with:
        args: unzip -qq assets.zip -d ..

    - name: Create log file
      run: |
        Get-ChildItem .. -Recurse | Out-File -FilePath .\all-files.txt
    
    - name: Archive log file
      uses: actions/upload-artifact@v3
      with:
        name: all-files
        path: .\all-files.txt
      
      # See https://github.com/Jimver/cuda-toolkit
    - uses: Jimver/cuda-toolkit@v0.2.10
      id: cuda-toolkit
      with:
        cuda: '12.1.0'

    - run: | 
        echo "Installed cuda version is:${{steps.cuda-toolkit.outputs.cuda}}"
        echo "Cuda install location:${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
        nvcc -V
  
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: | 
          [string]$nv12_path = [System.IO.Path]::GetFullPath((Join-Path $pwd '../Video_Codec_SDK_12.0.16'))
          $env:NV12_SDK_ROOT = $nv12_path
          echo "nv12_path $nv12_path"
          echo "NV12_SDK_ROOT $env:NV12_SDK_ROOT"
          cmake -S . --preset=x64-debug
      env:
        CMAKE_TOOLCHAIN_FILE: ../vcpkg-ffmpeg/scripts/buildsystems/vcpkg.cmake

    - name: Build
      # Build your program with the given configuration
      run: cmake --build out/build/x64-debug

    - name: Archive build
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: out # Zip only the "out" folder - we don't need anything else

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}

