name: CMake

on:
  push:
    branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
  
    # See https://github.com/marketplace/actions/check-artifact-existence
    - uses: xSAVIKx/artifact-exists-action@v0
      id: check-vcpkg-artifact-exists
      with:
        name: 'vcpkg-zip'

    - name: Checking for artifact existance
      run: echo "Does artifact exists? $env:ARTIFACT_EXISTS"
      env:
        ARTIFACT_EXISTS: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) }}

    - name: Print all
      env:
        ALL_CHECK_OUTPUT: ${{join(steps.check-vcpkg-artifact-exists.outputs.*, '\n')}}
        ASD: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) }}
        ASD1: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == true }}
        ASD2: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == false }}
      run: |
          "echo ALL_CHECK_OUTPUT is $env:ALL_CHECK_OUTPUT"
          "echo ASD is $env:ASD"
          "echo ASD1 is $env:ASD1"
          "echo ASD2 is $env:ASD2"

    #- name: Conditional2
    #  if: ${{ $env:ASD }}
    #  run: echo "This works 2"
   
    - name: Print GitHub Context
      run: |
          "echo GITHUB_CONTEXT is $env:GC"
          "echo hej"
          "echo AI is $env:AO"
      env:
        GC: ${{ toJSON(github) }}
        AO: ${{ toJSON(steps.check-vcpkg-artifact-exists.outputs) }}
      
    - uses: lukka/get-cmake@latest
    
      # See https://github.com/marketplace/actions/run-vcpkg
    - name: Setup vcpkg (it does not install any package yet)
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == false }}
      uses: lukka/run-vcpkg@v11
      with:
        # This is the default location of the directory containing vcpkg sources.
        # Change it to the right location if needed.
        vcpkgDirectory: '${{ github.workspace }}/../vcpkg'

        # If not using a submodule for vcpkg sources, this specifies which commit
        # id must be checkout from a Git repo. 
        # Note: it must not be set if using a Git submodule for vcpkg.
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'

        # This is the glob expression used to locate the vcpkg.json. 
        # Change it to match a single manifest file you want to use.
        # Note: do not use `${{ github.context }}` to compose the value as it
        # contains backslashes that would be misinterpreted. Instead
        # compose a value relative to the root of the repository using
        # `**/path/from/root/of/repo/to/vcpkg.json` to match the desired `vcpkg.json`.
        vcpkgJsonGlob: 'vcpkg.json'

        # This is only needed if the command `vcpkg install` must run at this step.
        # Instead it is highly suggested to let `run-cmake` to run vcpkg later on
        # using the vcpkg.cmake toolchain. The default is `false`.
        runVcpkgInstall: true
        
    # See https://github.com/marketplace/actions/action-zip
    - uses: montudor/action-zip@v1
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == false }}
      with:
        args: zip -qq -r vcpkg.zip ../vcpkg
        
    # See https://github.com/actions/upload-artifact
    - uses: actions/upload-artifact@v3
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == false }}
      with:
        name: vcpkg-zip
        path: vcpkg.zip

    # See https://github.com/actions/download-artifact
    - uses: actions/download-artifact@v3
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == true }}
      with:
        name: vcpkg-zip
        
    # See https://github.com/marketplace/actions/action-zip
    - uses: montudor/action-zip@v1
      if: ${{ fromJson(steps.check-vcpkg-artifact-exists.outputs.exists) == true }}
      with:
        args: unzip -qq vcpkg.zip -d ../vcpkg
      
      # See https://github.com/Jimver/cuda-toolkit
    - uses: Jimver/cuda-toolkit@v0.2.10
      id: cuda-toolkit
      with:
        cuda: '12.1.0'

    - run: | 
        echo "Installed cuda version is:${{steps.cuda-toolkit.outputs.cuda}}"
        echo "Cuda install location:${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
        nvcc -V
  
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S . --preset=x64-debug

    - name: Build
      # Build your program with the given configuration
      run: cmake --build out/build/x64-debug

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}

